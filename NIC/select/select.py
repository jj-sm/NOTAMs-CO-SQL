# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Tk, Canvas, Button, Text, PhotoImage
import subprocess
import threading
import sys
import os

# # Get the current script's directory
# current_dir = os.path.dirname(__file__)
#
# # Construct the relative path to the NIC_Functions directory
# nic_functions_path = os.path.join(current_dir, '../NIC_Functions')
#
# # Add the relative path to the system path
# sys.path.append(nic_functions_path)

# Now you can import the necessary function
from NIC.NIC_Functions.Select_Out_NOTAMs import process_notams



OUTPUT_PATH = Path(__file__).parent
BASE_PATH = Path(__file__).resolve().parent
ASSETS_PATH = BASE_PATH / "assets" / "frame0"


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def append_message_to_output(message: str):
    """
    Append a message to the `entry_2` Text widget.
    """
    entry_2.insert("end", f"{message}\n")
    entry_2.see("end")  # Scroll to the latest message

import os
import subprocess
from pathlib import Path

def get_documents_folder():
    # Check for the user's home directory
    home_dir = os.path.expanduser("~")

    # Known localized folder names for Documents (you can expand this list if needed)
    localized_documents_names = ["Documents", "Dokumente", "Documents", "Mes Documents"]

    for folder_name in localized_documents_names:
        potential_path = os.path.join(home_dir, folder_name)
        if os.path.isdir(potential_path):
            return potential_path
    # Default to English "Documents" if nothing matches
    return os.path.join(home_dir, "Documents")


def append_message_to_output(message: str):
    """
    Append a message to the `entry_2` Text widget.
    """
    entry_2.insert("end", f"{message}\n")
    entry_2.see("end")  # Scroll to the latest message


def open_selection_result():
    """Open the Selection_Result.csv file using the default system application."""
    user_documents_folder = get_documents_folder()
    nic_folder = os.path.join(user_documents_folder, "NIC")
    selection_result_path = os.path.join(nic_folder, "Selection_Result.csv")

    if os.path.exists(selection_result_path):
        try:
            if os.name == 'nt':  # For Windows
                os.startfile(selection_result_path)
            elif os.name == 'posix':  # For macOS and Linux
                subprocess.run(['open', selection_result_path])  # macOS
                # subprocess.run(['xdg-open', selection_result_path])  # For Linux
            append_message_to_output(f"Opened file: {selection_result_path}")
        except Exception as e:
            append_message_to_output(f"Error opening file: {e}")
    else:
        append_message_to_output("File not found: Selection_Result.csv")


def clear_selection_result():
    """Clear the contents of Selection_Result.csv."""
    user_documents_folder = get_documents_folder()
    nic_folder = os.path.join(user_documents_folder, "NIC")
    selection_result_path = os.path.join(nic_folder, "Selection_Result.csv")

    try:
        with open(selection_result_path, 'w') as file:
            file.truncate(0)  # Clear the file contents
        append_message_to_output(f"File cleared: {selection_result_path}")
    except Exception as e:
        append_message_to_output(f"Error clearing file: {e}")


def execute_notams_processing():
    """Function to execute NOTAMs processing in a separate thread to avoid freezing the UI."""
    try:
        lta_codes_input = entry_1.get("1.0", "end-1c")  # Get the input from entry_1
        append_message_to_output(f"Processing NOTAMs for codes: {lta_codes_input}")
        process_notams(lta_codes_input)  # This is the function from your Select_Out_NOTAMs.py
        append_message_to_output("Processing complete. Result written to 'Selection_Result.csv'.")
    except Exception as e:
        append_message_to_output(f"Error processing NOTAMs: {e}")


# Create the Tkinter window
window = Tk()
window.title('Select NOTAMs')

window.geometry("515x488")
window.configure(bg="#181818")

canvas = Canvas(
    window,
    bg="#181818",
    height=488,
    width=515,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)
canvas.create_rectangle(
    0.0,
    0.0,
    515.0,
    92.0,
    fill="#1300C1",
    outline=""
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    425.0,
    46.0,
    image=image_image_1
)

canvas.create_text(
    24.0,
    16.0,
    anchor="nw",
    text="NIC",
    fill="#FFFFFF",
    font=("Orbitron Bold", 48 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: threading.Thread(target=execute_notams_processing).start(),  # Use threading to run the function
    relief="flat"
)
button_1.place(
    x=354.0,
    y=154.0,
    width=128.01889038085938,
    height=34.38446044921875
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=clear_selection_result,  # This will clear the CSV file when clicked
    relief="flat"
)
button_2.place(
    x=354.0,
    y=200.0,
    width=127.9991226196289,
    height=34.38446044921875
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=open_selection_result,  # This will open the CSV file when clicked
    relief="flat"
)
button_3.place(
    x=354.0,
    y=245.0,
    width=127.9991226196289,
    height=34.38446044921875
)

canvas.create_text(
    33.0,
    122.0,
    anchor="nw",
    text="Paste your selected NOTAMâ€™s CODES",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    190.0,
    216.5,
    image=entry_image_1
)
entry_1 = Text(
    bd=0,
    bg="#000000",
    fg="#FFFFFF",
    highlightthickness=0
)
entry_1.place(
    x=33.0,
    y=154.0,
    width=314.0,
    height=123.0
)

canvas.create_text(
    33.0,
    306.0,
    anchor="nw",
    text="Output Message:",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    257.5,
    396.0,
    image=entry_image_2
)
entry_2 = Text(
    bd=0,
    bg="#000000",
    fg="#FFFFFF",
    highlightthickness=0
)
entry_2.place(
    x=33.0,
    y=338.0,
    width=449.0,
    height=114.0
)

window.resizable(False, False)
window.mainloop()
